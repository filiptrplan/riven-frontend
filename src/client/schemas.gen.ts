// This file is auto-generated by @hey-api/openapi-ts

export const AddItemsResponseSchema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        message: {
            type: 'string',
            title: 'Message'
        }
    },
    type: 'object',
    required: ['success', 'message'],
    title: 'AddItemsResponse'
} as const;

export const BelongsToCollectionSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        poster_path: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Poster Path'
        },
        backdrop_path: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Backdrop Path'
        }
    },
    type: 'object',
    required: ['id', 'name', 'poster_path', 'backdrop_path'],
    title: 'BelongsToCollection'
} as const;

export const DataAndSuccessResponse_RDUser_Schema = {
    properties: {
        data: {
            '$ref': '#/components/schemas/RDUser'
        },
        success: {
            type: 'boolean',
            title: 'Success'
        }
    },
    type: 'object',
    required: ['data', 'success'],
    title: 'DataAndSuccessResponse[RDUser]'
} as const;

export const DataAndSuccessResponse_dict_str__list_EventUpdate___Schema = {
    properties: {
        data: {
            additionalProperties: {
                items: {
                    '$ref': '#/components/schemas/EventUpdate'
                },
                type: 'array'
            },
            type: 'object',
            title: 'Data'
        },
        success: {
            type: 'boolean',
            title: 'Success'
        }
    },
    type: 'object',
    required: ['data', 'success'],
    title: 'DataAndSuccessResponse[dict[str, list[EventUpdate]]]'
} as const;

export const DataAndSuccessResponse_dict_str__str__Schema = {
    properties: {
        data: {
            additionalProperties: {
                type: 'string'
            },
            type: 'object',
            title: 'Data'
        },
        success: {
            type: 'boolean',
            title: 'Success'
        }
    },
    type: 'object',
    required: ['data', 'success'],
    title: 'DataAndSuccessResponse[dict[str, str]]'
} as const;

export const DatesSchema = {
    properties: {
        maximum: {
            type: 'string',
            format: 'date',
            title: 'Maximum'
        },
        minimum: {
            type: 'string',
            format: 'date',
            title: 'Minimum'
        }
    },
    type: 'object',
    required: ['maximum', 'minimum'],
    title: 'Dates'
} as const;

export const EventUpdateSchema = {
    properties: {
        item_id: {
            type: 'integer',
            title: 'Item Id'
        },
        imdb_id: {
            type: 'string',
            title: 'Imdb Id'
        },
        title: {
            type: 'string',
            title: 'Title'
        },
        type: {
            type: 'string',
            title: 'Type'
        },
        emitted_by: {
            type: 'string',
            title: 'Emitted By'
        },
        run_at: {
            type: 'string',
            title: 'Run At'
        },
        last_state: {
            type: 'string',
            title: 'Last State'
        }
    },
    type: 'object',
    required: ['item_id', 'imdb_id', 'title', 'type', 'emitted_by', 'run_at', 'last_state'],
    title: 'EventUpdate'
} as const;

export const ExternalIDExternalSourceSchema = {
    type: 'string',
    enum: ['imdb_id', 'facebook_id', 'instagram_id', 'tvdb_id', 'tiktok_id', 'twitter_id', 'wikidata_id', 'youtube_id'],
    title: 'ExternalIDExternalSource'
} as const;

export const GenreSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        }
    },
    type: 'object',
    required: ['id', 'name'],
    title: 'Genre'
} as const;

export const HTTPValidationErrorSchema = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const IncludeAdultSchema = {
    type: 'string',
    enum: ['true', 'false'],
    title: 'IncludeAdult'
} as const;

export const ItemsByImdbResponseSchema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        items: {
            items: {
                type: 'object'
            },
            type: 'array',
            title: 'Items'
        }
    },
    type: 'object',
    required: ['success', 'items'],
    title: 'ItemsByImdbResponse'
} as const;

export const ItemsResponseSchema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        items: {
            items: {
                type: 'object'
            },
            type: 'array',
            title: 'Items'
        },
        page: {
            type: 'integer',
            title: 'Page'
        },
        limit: {
            type: 'integer',
            title: 'Limit'
        },
        total_items: {
            type: 'integer',
            title: 'Total Items'
        },
        total_pages: {
            type: 'integer',
            title: 'Total Pages'
        }
    },
    type: 'object',
    required: ['success', 'items', 'page', 'limit', 'total_items', 'total_pages'],
    title: 'ItemsResponse'
} as const;

export const LogsResponseSchema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        logs: {
            type: 'string',
            title: 'Logs'
        }
    },
    type: 'object',
    required: ['success', 'logs'],
    title: 'LogsResponse'
} as const;

export const MessageAndSuccessResponseSchema = {
    properties: {
        message: {
            type: 'string',
            title: 'Message'
        },
        success: {
            type: 'boolean',
            title: 'Success'
        }
    },
    type: 'object',
    required: ['message', 'success'],
    title: 'MessageAndSuccessResponse'
} as const;

export const MessageResponseSchema = {
    properties: {
        message: {
            type: 'string',
            title: 'Message'
        }
    },
    type: 'object',
    required: ['message'],
    title: 'MessageResponse'
} as const;

export const NetworkSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        logo_path: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Logo Path'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        origin_country: {
            type: 'string',
            title: 'Origin Country'
        }
    },
    type: 'object',
    required: ['id', 'logo_path', 'name', 'origin_country'],
    title: 'Network'
} as const;

export const ProductionCompanySchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        logo_path: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Logo Path'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        origin_country: {
            type: 'string',
            title: 'Origin Country'
        }
    },
    type: 'object',
    required: ['id', 'logo_path', 'name', 'origin_country'],
    title: 'ProductionCompany'
} as const;

export const ProductionCountrySchema = {
    properties: {
        iso_3166_1: {
            type: 'string',
            title: 'Iso 3166 1'
        },
        name: {
            type: 'string',
            title: 'Name'
        }
    },
    type: 'object',
    required: ['iso_3166_1', 'name'],
    title: 'ProductionCountry'
} as const;

export const RDTorrentSchema = {
    properties: {
        id: {
            type: 'string',
            title: 'Id'
        },
        hash: {
            type: 'string',
            title: 'Hash'
        },
        filename: {
            type: 'string',
            title: 'Filename'
        },
        bytes: {
            type: 'integer',
            title: 'Bytes'
        },
        status: {
            '$ref': '#/components/schemas/RDTorrentStatus'
        },
        added: {
            type: 'string',
            format: 'date-time',
            title: 'Added'
        },
        links: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Links'
        },
        ended: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Ended'
        },
        speed: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Speed'
        },
        seeders: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Seeders'
        }
    },
    type: 'object',
    required: ['id', 'hash', 'filename', 'bytes', 'status', 'added', 'links'],
    title: 'RDTorrent'
} as const;

export const RDTorrentStatusSchema = {
    type: 'string',
    enum: ['magnet_error', 'magnet_conversion', 'waiting_files_selection', 'downloading', 'downloaded', 'error', 'seeding', 'dead', 'uploading', 'compressing'],
    title: 'RDTorrentStatus'
} as const;

export const RDUserSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        username: {
            type: 'string',
            title: 'Username'
        },
        email: {
            type: 'string',
            title: 'Email'
        },
        points: {
            type: 'integer',
            title: 'Points',
            description: "User's RD points"
        },
        locale: {
            type: 'string',
            title: 'Locale'
        },
        avatar: {
            type: 'string',
            title: 'Avatar',
            description: "URL to the user's avatar"
        },
        type: {
            type: 'string',
            enum: ['free', 'premium'],
            title: 'Type'
        },
        premium: {
            type: 'integer',
            title: 'Premium',
            description: 'Premium subscription left in seconds'
        }
    },
    type: 'object',
    required: ['id', 'username', 'email', 'points', 'locale', 'avatar', 'type', 'premium'],
    title: 'RDUser'
} as const;

export const RemoveResponseSchema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        message: {
            type: 'string',
            title: 'Message'
        },
        ids: {
            items: {
                type: 'integer'
            },
            type: 'array',
            title: 'Ids'
        }
    },
    type: 'object',
    required: ['success', 'message', 'ids'],
    title: 'RemoveResponse'
} as const;

export const ResetResponseSchema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        message: {
            type: 'string',
            title: 'Message'
        },
        ids: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Ids'
        }
    },
    type: 'object',
    required: ['success', 'message', 'ids'],
    title: 'ResetResponse'
} as const;

export const RetryResponseSchema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        message: {
            type: 'string',
            title: 'Message'
        },
        ids: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Ids'
        }
    },
    type: 'object',
    required: ['success', 'message', 'ids'],
    title: 'RetryResponse'
} as const;

export const RootResponseSchema = {
    properties: {
        message: {
            type: 'string',
            title: 'Message'
        },
        success: {
            type: 'boolean',
            title: 'Success'
        },
        version: {
            type: 'string',
            title: 'Version'
        }
    },
    type: 'object',
    required: ['message', 'success', 'version'],
    title: 'RootResponse'
} as const;

export const ScrapeResponseSchema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        data: {
            items: {
                '$ref': '#/components/schemas/ScrapedTorrent'
            },
            type: 'array',
            title: 'Data'
        }
    },
    type: 'object',
    required: ['success', 'data'],
    title: 'ScrapeResponse'
} as const;

export const ScrapedTorrentSchema = {
    properties: {
        rank: {
            type: 'integer',
            title: 'Rank'
        },
        raw_title: {
            type: 'string',
            title: 'Raw Title'
        },
        infohash: {
            type: 'string',
            title: 'Infohash'
        }
    },
    type: 'object',
    required: ['rank', 'raw_title', 'infohash'],
    title: 'ScrapedTorrent'
} as const;

export const SetSettingsSchema = {
    properties: {
        key: {
            type: 'string',
            title: 'Key'
        },
        value: {
            title: 'Value'
        }
    },
    type: 'object',
    required: ['key', 'value'],
    title: 'SetSettings'
} as const;

export const SetTorrentRDResponseSchema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        message: {
            type: 'string',
            title: 'Message'
        },
        item_id: {
            type: 'integer',
            title: 'Item Id'
        },
        torrent_id: {
            type: 'string',
            title: 'Torrent Id'
        }
    },
    type: 'object',
    required: ['success', 'message', 'item_id', 'torrent_id'],
    title: 'SetTorrentRDResponse'
} as const;

export const SpokenLanguageSchema = {
    properties: {
        english_name: {
            type: 'string',
            title: 'English Name'
        },
        iso_639_1: {
            type: 'string',
            title: 'Iso 639 1'
        },
        name: {
            type: 'string',
            title: 'Name'
        }
    },
    type: 'object',
    required: ['english_name', 'iso_639_1', 'name'],
    title: 'SpokenLanguage'
} as const;

export const StateResponseSchema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        states: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'States'
        }
    },
    type: 'object',
    required: ['success', 'states'],
    title: 'StateResponse'
} as const;

export const StatesSchema = {
    type: 'string',
    enum: ['Unknown', 'Unreleased', 'Ongoing', 'Requested', 'Indexed', 'Scraped', 'Downloaded', 'Symlinked', 'Completed', 'PartiallyCompleted', 'Failed'],
    title: 'States'
} as const;

export const StatsResponseSchema = {
    properties: {
        total_items: {
            type: 'integer',
            title: 'Total Items'
        },
        total_movies: {
            type: 'integer',
            title: 'Total Movies'
        },
        total_shows: {
            type: 'integer',
            title: 'Total Shows'
        },
        total_seasons: {
            type: 'integer',
            title: 'Total Seasons'
        },
        total_episodes: {
            type: 'integer',
            title: 'Total Episodes'
        },
        total_symlinks: {
            type: 'integer',
            title: 'Total Symlinks'
        },
        incomplete_items: {
            type: 'integer',
            title: 'Incomplete Items'
        },
        incomplete_retries: {
            additionalProperties: {
                type: 'integer'
            },
            type: 'object',
            title: 'Incomplete Retries',
            description: 'Media item log string: number of retries'
        },
        states: {
            additionalProperties: {
                type: 'integer'
            },
            type: 'object',
            title: 'States'
        }
    },
    type: 'object',
    required: ['total_items', 'total_movies', 'total_shows', 'total_seasons', 'total_episodes', 'total_symlinks', 'incomplete_items', 'incomplete_retries', 'states'],
    title: 'StatsResponse'
} as const;

export const TmdbCollectionDetailsSchema = {
    properties: {
        adult: {
            type: 'boolean',
            title: 'Adult'
        },
        backdrop_path: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Backdrop Path'
        },
        id: {
            type: 'integer',
            title: 'Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        overview: {
            type: 'string',
            title: 'Overview'
        },
        original_language: {
            type: 'string',
            title: 'Original Language'
        },
        original_name: {
            type: 'string',
            title: 'Original Name'
        },
        poster_path: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Poster Path'
        }
    },
    type: 'object',
    required: ['adult', 'backdrop_path', 'id', 'name', 'overview', 'original_language', 'original_name', 'poster_path'],
    title: 'TmdbCollectionDetails'
} as const;

export const TmdbEpisodeDetailsSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        overview: {
            type: 'string',
            title: 'Overview'
        },
        media_type: {
            type: 'string',
            enum: ['tv_episode'],
            const: 'tv_episode',
            title: 'Media Type'
        },
        vote_average: {
            type: 'number',
            title: 'Vote Average'
        },
        vote_count: {
            type: 'integer',
            title: 'Vote Count'
        },
        air_date: {
            type: 'string',
            format: 'date',
            title: 'Air Date'
        },
        episode_number: {
            type: 'integer',
            title: 'Episode Number'
        },
        episode_type: {
            type: 'string',
            title: 'Episode Type'
        },
        production_code: {
            type: 'string',
            title: 'Production Code'
        },
        runtime: {
            type: 'integer',
            title: 'Runtime'
        },
        season_number: {
            type: 'integer',
            title: 'Season Number'
        },
        show_id: {
            type: 'integer',
            title: 'Show Id'
        },
        still_path: {
            type: 'string',
            title: 'Still Path'
        },
        crew: {
            items: {
                type: 'object'
            },
            type: 'array',
            title: 'Crew'
        },
        guest_stars: {
            items: {
                type: 'object'
            },
            type: 'array',
            title: 'Guest Stars'
        }
    },
    type: 'object',
    required: ['id', 'name', 'overview', 'media_type', 'vote_average', 'vote_count', 'air_date', 'episode_number', 'episode_type', 'production_code', 'runtime', 'season_number', 'show_id', 'still_path', 'crew', 'guest_stars'],
    title: 'TmdbEpisodeDetails'
} as const;

export const TmdbEpisodeItemSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        overview: {
            type: 'string',
            title: 'Overview'
        },
        media_type: {
            type: 'string',
            enum: ['tv_episode'],
            const: 'tv_episode',
            title: 'Media Type'
        },
        vote_average: {
            type: 'number',
            title: 'Vote Average'
        },
        vote_count: {
            type: 'integer',
            title: 'Vote Count'
        },
        air_date: {
            type: 'string',
            format: 'date',
            title: 'Air Date'
        },
        episode_number: {
            type: 'integer',
            title: 'Episode Number'
        },
        episode_type: {
            type: 'string',
            title: 'Episode Type'
        },
        production_code: {
            type: 'string',
            title: 'Production Code'
        },
        runtime: {
            type: 'integer',
            title: 'Runtime'
        },
        season_number: {
            type: 'integer',
            title: 'Season Number'
        },
        show_id: {
            type: 'integer',
            title: 'Show Id'
        },
        still_path: {
            type: 'string',
            title: 'Still Path'
        }
    },
    type: 'object',
    required: ['id', 'name', 'overview', 'media_type', 'vote_average', 'vote_count', 'air_date', 'episode_number', 'episode_type', 'production_code', 'runtime', 'season_number', 'show_id', 'still_path'],
    title: 'TmdbEpisodeItem'
} as const;

export const TmdbFindResultsSchema = {
    properties: {
        movie_results: {
            items: {
                '$ref': '#/components/schemas/TmdbItem'
            },
            type: 'array',
            title: 'Movie Results'
        },
        tv_results: {
            items: {
                '$ref': '#/components/schemas/TmdbItem'
            },
            type: 'array',
            title: 'Tv Results'
        },
        tv_episode_results: {
            items: {
                '$ref': '#/components/schemas/TmdbEpisodeItem'
            },
            type: 'array',
            title: 'Tv Episode Results'
        },
        tv_season_results: {
            items: {
                '$ref': '#/components/schemas/TmdbSeasonItem'
            },
            type: 'array',
            title: 'Tv Season Results'
        }
    },
    type: 'object',
    required: ['movie_results', 'tv_results', 'tv_episode_results', 'tv_season_results'],
    title: 'TmdbFindResults'
} as const;

export const TmdbItemSchema = {
    properties: {
        adult: {
            type: 'boolean',
            title: 'Adult'
        },
        backdrop_path: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Backdrop Path'
        },
        id: {
            type: 'integer',
            title: 'Id'
        },
        title: {
            type: 'string',
            title: 'Title'
        },
        original_title: {
            type: 'string',
            title: 'Original Title'
        },
        original_language: {
            type: 'string',
            title: 'Original Language'
        },
        overview: {
            type: 'string',
            title: 'Overview'
        },
        poster_path: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Poster Path'
        },
        media_type: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/TmdbMediaType'
                },
                {
                    type: 'null'
                }
            ]
        },
        genre_ids: {
            items: {
                type: 'integer'
            },
            type: 'array',
            title: 'Genre Ids'
        },
        popularity: {
            type: 'number',
            title: 'Popularity'
        },
        release_date: {
            type: 'string',
            title: 'Release Date'
        },
        video: {
            type: 'boolean',
            title: 'Video'
        },
        vote_average: {
            type: 'number',
            title: 'Vote Average'
        },
        vote_count: {
            type: 'integer',
            title: 'Vote Count'
        }
    },
    type: 'object',
    required: ['adult', 'backdrop_path', 'id', 'title', 'original_title', 'original_language', 'overview', 'poster_path', 'genre_ids', 'popularity', 'release_date', 'video', 'vote_average', 'vote_count'],
    title: 'TmdbItem'
} as const;

export const TmdbMediaTypeSchema = {
    type: 'string',
    enum: ['movie', 'tv', 'tv_episode', 'tv_season'],
    title: 'TmdbMediaType'
} as const;

export const TmdbMovieDetailsSchema = {
    properties: {
        adult: {
            type: 'boolean',
            title: 'Adult'
        },
        backdrop_path: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Backdrop Path'
        },
        belongs_to_collection: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/BelongsToCollection'
                },
                {
                    type: 'null'
                }
            ]
        },
        budget: {
            type: 'integer',
            title: 'Budget'
        },
        genres: {
            items: {
                '$ref': '#/components/schemas/Genre'
            },
            type: 'array',
            title: 'Genres'
        },
        homepage: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Homepage'
        },
        id: {
            type: 'integer',
            title: 'Id'
        },
        imdb_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Imdb Id'
        },
        original_language: {
            type: 'string',
            title: 'Original Language'
        },
        original_title: {
            type: 'string',
            title: 'Original Title'
        },
        overview: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Overview'
        },
        popularity: {
            type: 'number',
            title: 'Popularity'
        },
        poster_path: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Poster Path'
        },
        production_companies: {
            items: {
                '$ref': '#/components/schemas/ProductionCompany'
            },
            type: 'array',
            title: 'Production Companies'
        },
        production_countries: {
            items: {
                '$ref': '#/components/schemas/ProductionCountry'
            },
            type: 'array',
            title: 'Production Countries'
        },
        release_date: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Release Date'
        },
        revenue: {
            type: 'integer',
            title: 'Revenue'
        },
        runtime: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Runtime'
        },
        spoken_languages: {
            items: {
                '$ref': '#/components/schemas/SpokenLanguage'
            },
            type: 'array',
            title: 'Spoken Languages'
        },
        status: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Status'
        },
        tagline: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Tagline'
        },
        title: {
            type: 'string',
            title: 'Title'
        },
        video: {
            type: 'boolean',
            title: 'Video'
        },
        vote_average: {
            type: 'number',
            title: 'Vote Average'
        },
        vote_count: {
            type: 'integer',
            title: 'Vote Count'
        }
    },
    type: 'object',
    required: ['adult', 'backdrop_path', 'belongs_to_collection', 'budget', 'genres', 'homepage', 'id', 'imdb_id', 'original_language', 'original_title', 'overview', 'popularity', 'poster_path', 'production_companies', 'production_countries', 'release_date', 'revenue', 'runtime', 'spoken_languages', 'status', 'tagline', 'title', 'video', 'vote_average', 'vote_count'],
    title: 'TmdbMovieDetails'
} as const;

export const TmdbPagedResultsWithDates_TmdbItem_Schema = {
    properties: {
        page: {
            type: 'integer',
            title: 'Page'
        },
        results: {
            items: {
                '$ref': '#/components/schemas/TmdbItem'
            },
            type: 'array',
            title: 'Results'
        },
        total_pages: {
            type: 'integer',
            title: 'Total Pages'
        },
        total_results: {
            type: 'integer',
            title: 'Total Results'
        },
        dates: {
            '$ref': '#/components/schemas/Dates'
        }
    },
    type: 'object',
    required: ['page', 'results', 'total_pages', 'total_results', 'dates'],
    title: 'TmdbPagedResultsWithDates[TmdbItem]'
} as const;

export const TmdbPagedResults_TmdbCollectionDetails_Schema = {
    properties: {
        page: {
            type: 'integer',
            title: 'Page'
        },
        results: {
            items: {
                '$ref': '#/components/schemas/TmdbCollectionDetails'
            },
            type: 'array',
            title: 'Results'
        },
        total_pages: {
            type: 'integer',
            title: 'Total Pages'
        },
        total_results: {
            type: 'integer',
            title: 'Total Results'
        }
    },
    type: 'object',
    required: ['page', 'results', 'total_pages', 'total_results'],
    title: 'TmdbPagedResults[TmdbCollectionDetails]'
} as const;

export const TmdbPagedResults_TmdbItem_Schema = {
    properties: {
        page: {
            type: 'integer',
            title: 'Page'
        },
        results: {
            items: {
                '$ref': '#/components/schemas/TmdbItem'
            },
            type: 'array',
            title: 'Results'
        },
        total_pages: {
            type: 'integer',
            title: 'Total Pages'
        },
        total_results: {
            type: 'integer',
            title: 'Total Results'
        }
    },
    type: 'object',
    required: ['page', 'results', 'total_pages', 'total_results'],
    title: 'TmdbPagedResults[TmdbItem]'
} as const;

export const TmdbResponse_TmdbEpisodeDetails_Schema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        data: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/TmdbEpisodeDetails'
                },
                {
                    type: 'null'
                }
            ]
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message'
        }
    },
    type: 'object',
    required: ['success'],
    title: 'TmdbResponse[TmdbEpisodeDetails]'
} as const;

export const TmdbResponse_TmdbFindResults_Schema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        data: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/TmdbFindResults'
                },
                {
                    type: 'null'
                }
            ]
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message'
        }
    },
    type: 'object',
    required: ['success'],
    title: 'TmdbResponse[TmdbFindResults]'
} as const;

export const TmdbResponse_TmdbMovieDetails_Schema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        data: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/TmdbMovieDetails'
                },
                {
                    type: 'null'
                }
            ]
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message'
        }
    },
    type: 'object',
    required: ['success'],
    title: 'TmdbResponse[TmdbMovieDetails]'
} as const;

export const TmdbResponse_TmdbPagedResultsWithDates_TmdbItem__Schema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        data: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/TmdbPagedResultsWithDates_TmdbItem_'
                },
                {
                    type: 'null'
                }
            ]
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message'
        }
    },
    type: 'object',
    required: ['success'],
    title: 'TmdbResponse[TmdbPagedResultsWithDates[TmdbItem]]'
} as const;

export const TmdbResponse_TmdbPagedResults_TmdbCollectionDetails__Schema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        data: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/TmdbPagedResults_TmdbCollectionDetails_'
                },
                {
                    type: 'null'
                }
            ]
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message'
        }
    },
    type: 'object',
    required: ['success'],
    title: 'TmdbResponse[TmdbPagedResults[TmdbCollectionDetails]]'
} as const;

export const TmdbResponse_TmdbPagedResults_TmdbItem__Schema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        data: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/TmdbPagedResults_TmdbItem_'
                },
                {
                    type: 'null'
                }
            ]
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message'
        }
    },
    type: 'object',
    required: ['success'],
    title: 'TmdbResponse[TmdbPagedResults[TmdbItem]]'
} as const;

export const TmdbResponse_TmdbSeasonDetails_Schema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        data: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/TmdbSeasonDetails'
                },
                {
                    type: 'null'
                }
            ]
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message'
        }
    },
    type: 'object',
    required: ['success'],
    title: 'TmdbResponse[TmdbSeasonDetails]'
} as const;

export const TmdbResponse_TmdbTVDetails_Schema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        data: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/TmdbTVDetails'
                },
                {
                    type: 'null'
                }
            ]
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message'
        }
    },
    type: 'object',
    required: ['success'],
    title: 'TmdbResponse[TmdbTVDetails]'
} as const;

export const TmdbSeasonDetailsSchema = {
    properties: {
        air_date: {
            type: 'string',
            title: 'Air Date'
        },
        episodes: {
            items: {
                '$ref': '#/components/schemas/TmdbEpisodeDetails'
            },
            type: 'array',
            title: 'Episodes'
        }
    },
    type: 'object',
    required: ['air_date', 'episodes'],
    title: 'TmdbSeasonDetails'
} as const;

export const TmdbSeasonItemSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        overview: {
            type: 'string',
            title: 'Overview'
        },
        poster_path: {
            type: 'string',
            title: 'Poster Path'
        },
        media_type: {
            type: 'string',
            enum: ['tv_season'],
            const: 'tv_season',
            title: 'Media Type'
        },
        vote_average: {
            type: 'number',
            title: 'Vote Average'
        },
        air_date: {
            type: 'string',
            format: 'date',
            title: 'Air Date'
        },
        season_number: {
            type: 'integer',
            title: 'Season Number'
        },
        show_id: {
            type: 'integer',
            title: 'Show Id'
        },
        episode_count: {
            type: 'integer',
            title: 'Episode Count'
        }
    },
    type: 'object',
    required: ['id', 'name', 'overview', 'poster_path', 'media_type', 'vote_average', 'air_date', 'season_number', 'show_id', 'episode_count'],
    title: 'TmdbSeasonItem'
} as const;

export const TmdbTVDetailsSchema = {
    properties: {
        adult: {
            type: 'boolean',
            title: 'Adult'
        },
        backdrop_path: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Backdrop Path'
        },
        episode_run_time: {
            items: {
                type: 'integer'
            },
            type: 'array',
            title: 'Episode Run Time'
        },
        first_air_date: {
            type: 'string',
            title: 'First Air Date'
        },
        genres: {
            items: {
                '$ref': '#/components/schemas/Genre'
            },
            type: 'array',
            title: 'Genres'
        },
        homepage: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Homepage'
        },
        id: {
            type: 'integer',
            title: 'Id'
        },
        in_production: {
            type: 'boolean',
            title: 'In Production'
        },
        languages: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Languages'
        },
        last_air_date: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Last Air Date'
        },
        last_episode_to_air: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/TmdbEpisodeItem'
                },
                {
                    type: 'null'
                }
            ]
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        next_episode_to_air: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Next Episode To Air'
        },
        networks: {
            items: {
                '$ref': '#/components/schemas/Network'
            },
            type: 'array',
            title: 'Networks'
        },
        number_of_episodes: {
            type: 'integer',
            title: 'Number Of Episodes'
        },
        number_of_seasons: {
            type: 'integer',
            title: 'Number Of Seasons'
        },
        origin_country: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Origin Country'
        },
        original_language: {
            type: 'string',
            title: 'Original Language'
        },
        original_name: {
            type: 'string',
            title: 'Original Name'
        },
        overview: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Overview'
        },
        popularity: {
            type: 'number',
            title: 'Popularity'
        },
        poster_path: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Poster Path'
        },
        production_companies: {
            items: {
                '$ref': '#/components/schemas/ProductionCompany'
            },
            type: 'array',
            title: 'Production Companies'
        },
        production_countries: {
            items: {
                '$ref': '#/components/schemas/ProductionCountry'
            },
            type: 'array',
            title: 'Production Countries'
        },
        seasons: {
            items: {
                '$ref': '#/components/schemas/TmdbSeasonItem'
            },
            type: 'array',
            title: 'Seasons'
        },
        spoken_languages: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Spoken Languages'
        },
        status: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Status'
        },
        tagline: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Tagline'
        },
        type: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Type'
        },
        vote_average: {
            type: 'number',
            title: 'Vote Average'
        },
        vote_count: {
            type: 'integer',
            title: 'Vote Count'
        }
    },
    type: 'object',
    required: ['adult', 'backdrop_path', 'episode_run_time', 'first_air_date', 'genres', 'homepage', 'id', 'in_production', 'languages', 'last_air_date', 'last_episode_to_air', 'name', 'next_episode_to_air', 'networks', 'number_of_episodes', 'number_of_seasons', 'origin_country', 'original_language', 'original_name', 'overview', 'popularity', 'poster_path', 'production_companies', 'production_countries', 'seasons', 'spoken_languages', 'status', 'tagline', 'type', 'vote_average', 'vote_count'],
    title: 'TmdbTVDetails'
} as const;

export const TraktOAuthInitiateResponseSchema = {
    properties: {
        auth_url: {
            type: 'string',
            title: 'Auth Url'
        }
    },
    type: 'object',
    required: ['auth_url'],
    title: 'TraktOAuthInitiateResponse'
} as const;

export const TrendingTypeSchema = {
    type: 'string',
    enum: ['all', 'movie', 'tv', 'person'],
    title: 'TrendingType'
} as const;

export const TrendingWindowSchema = {
    type: 'string',
    enum: ['day', 'week'],
    title: 'TrendingWindow'
} as const;

export const ValidationErrorSchema = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;